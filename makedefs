OBJFOLDER=objs
#VERBOSE=1

# Compiler and Flags
#******************************************************************************
CC= /Users/joeschaack/arm_gcc_work/compiler/bin/arm-none-eabi-gcc
CFLAGS= -Wall -Wextra   \
		-fno-common     \
		-mcpu=cortex-m3 \
		-mthumb         \
		-Os             \
		-Wcast-align    \
		-Wcast-qual     \
		-Wimplicit      \
		-Wpointer-arith \
		-Wswitch        \
		-Wredundant-decls\
		-fno-builtin \
		-ffunction-sections\
		-fdata-sections \
		-Wreturn-type    \
		-Wshadow        \
		-Wunused        
#		-fmessage-length=0 \
#		-fno-builtin \
#		-MD

# Assembler Flags
#******************************************************************************
AFLAGS= -ahls           \
		-mthumb         \
		-mcpu=cortex-m3 
#		-MD

# Linker and Flags
#******************************************************************************
LD=/Users/joeschaack/arm_gcc_work/compiler/bin/arm-none-eabi-gcc
#LDFLAGS= -mcpu=cortex-m3 -mthumb -Wl,--gc-sections 
LDFLAGS = -mcpu=cortex-m3 -mthumb -Os -nostartfiles -Wl,-MAP=test.map -Wl,--gc-sections #-Wl,--print-gc-sections

LD_PATH = lpc1xxx
#LD_SCRIPT = $(LD_PATH)/linkscript.ld
LD_FILE = lpc1343.dld

# OBJCOPY and Flags
#******************************************************************************
OBJCOPY=/Users/joeschaack/arm_gcc_work/compiler/bin/arm-none-eabi-objcopy
OCFLAGS = --strip-unneeded
OBJDUMP=/Users/joeschaack/arm_gcc_work/compiler/bin/arm-none-eabi-objdump
ODFLAGS = -d -S
# SIZE
#******************************************************************************
SIZE=/Users/joeschaack/arm_gcc_work/compiler/bin/arm-none-eabi-size

# Build the objects from c source files
#******************************************************************************
${OBJFOLDER}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  CC    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${CFLAGS} -o ${@} -c ${<}; \
	 fi
	@${CC} ${CFLAGS} -o ${@} -c ${<}

# Build the objects from the assembly files
#******************************************************************************
${OBJFOLDER}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  CC    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -o ${@} -c ${<}

# Link the objects into an elf file 
# Print the size
# output a hex file
#******************************************************************************
${OBJFOLDER}/%.elf:
	@if [ 'x${VERBOSE}' = x ]; \
	 then                      \
	     echo "  LD    ${@}";  \
	 fi
	@if [ 'x${VERBOSE}' != x ];                           \
	 then                                                 \
	     echo ${LD} -T ${LD_FILE} 						  \
	                ${LDFLAGS} -o ${@} ${^} -lm;               \
	 fi
	@${LD} -T ${LD_FILE} 						  \
			${LDFLAGS} -o ${@} ${^} -lm > /dev/null
	@${SIZE} ${@}
	@.bin/size ${@}
	@echo "  OBJ    ${@:.elf=.hex}"
	@${OBJCOPY} $(OCFLAGS) -O ihex ${@} ${@:.elf=.hex}
	@echo "  OBJ    ${@:.elf=.bin}"
	@${OBJCOPY} $(OCFLAGS) -O binary ${@} ${@:.elf=.bin}

${OBJFOLDER}/%.dump:
	@echo "  OBJDUMP    ${@}"
	@${OBJDUMP} ${@:.dump=.elf} $(ODFLAGS) | mvim -
